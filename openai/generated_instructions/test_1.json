[
    {
        "instruction": "Analyze the MOAS (Multiple Origin AS) prefixes from a local BGP update file for security insights, identifying prefixes announced by multiple ASes within a specific time window.",
        "input": "Time window: June 1, 2027, 08:00:00 to June 1, 2027, 10:00:00\nFile location: /path/to/local/bgp/updates",
        "output": "import os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_security():\n    from_time_str = \"2027-06-01 08:00:00\"\n    until_time_str = \"2027-06-01 10:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    moas_prefixes = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            prefix = elem.fields.get('prefix')\n                            origin_asn = elem.fields.get('as-path').split()[-1]\n\n                            if prefix and origin_asn:\n                                moas_prefixes[prefix].add(origin_asn)\n\n    # Identify MOAS prefixes\n    moas_results = {prefix: asns for prefix, asns in moas_prefixes.items() if len(asns) > 1}\n\n    print(\"MOAS (Multiple Origin AS) Prefixes Analysis\")\n    for prefix, asns in moas_results.items():\n        print(f\"Prefix: {prefix}, Origin ASNs: {', '.join(asns)}\")\n\nif __name__ == \"__main__\":\n    analyze_moas_security()",
        "most_similar_instructions": {
            "Summarize the total count of BGP update messages (announcements and withdrawals) for AS4766 within the time window from Oct 28 13:00 to Oct 28 13:15, 2024. Include the minimum, maximum, and median number of updates observed during this period.": 0.2058823529411765,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.1875,
            "Analyze the range of MED values and the most common community tags associated with BGP update messages for ASN 4766 from Oct 28 13:00 to Oct 28 14:00, 2024. Provide a summary of average MED values and frequently observed community tags.": 0.17142857142857143,
            "Calculate the top 10 ASNs by the number of unique prefixes they originate in the local BGP updates from March 5 00:00 to March 5 01:00, 2026. Summarize each ASN and the count of unique prefixes.": 0.15384615384615383,
            "Analyze changes in the LOCAL_PREF (Local Preference) attribute for routes advertised by AS65501 from Jan 2 08:00 to Jan 2 09:00, 2026. Track distinct LOCAL_PREF values and how often they change for each prefix.": 0.15384615384615383,
            "Identify and log BGP peer session up/down events for any monitored peers within the time window Mar 2 00:00 to Mar 2 02:00, 2027. Summarize each session's state changes and the timestamps of these events.": 0.15151515151515152,
            "Detect any MOAS (Multiple Origin AS) events for prefix 203.1.2.0/24 from Nov 1 12:00 to Nov 1 13:00, 2025, and cross-check if any of these additional origins might indicate a hijack (e.g., unknown or suspicious AS not typically announcing the prefix). Summarize potential hijack incidents.": 0.15,
            "Identify any newly appearing prefixes in the local BGP updates data from Sept 5 12:00 to Sept 5 13:00, 2025 by comparing against a known set of historical prefixes. Summarize the newly introduced prefixes, their origin AS, and first-seen timestamps.": 0.14285714285714285,
            "Analyze deaggregation for any subprefixes of 10.1.0.0/16 in the local BGP updates from May 1 10:00 to May 1 11:00, 2026. Identify newly announced longer subprefixes and compare their origin AS to the origin of the parent prefix.": 0.1408450704225352,
            "Examine the aggregator attribute for any prefixes originated by AS12345 between Feb 10 10:00 and Feb 10 11:00, 2025. Summarize the distinct aggregator ASNs and IPs along with occurrence counts.": 0.13559322033898305
        },
        "avg_similarity_score": 0.10437556302568846
    },
    {
        "instruction": "Analyze the presence of MOAS (Multiple Origin AS) prefixes in BGP updates files for the date range of January 1, 2028, to January 2, 2028. Report the number of MOAS occurrences and list the prefixes involved along with the ASNs announcing them.",
        "input": "Time window: January 1, 2028, 00:00:00 to January 2, 2028, 00:00:00\nRecord Type: updates (Announcements)\nAnalysis Type: MOAS detection",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef detect_moas():\n    from_time_str = \"2028-01-01 00:00:00\"\n    until_time_str = \"2028-01-02 00:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    prefix_to_asns = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_dt = datetime.strptime(date_str + time_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            prefix = elem.fields.get('prefix')\n                            as_path_str = elem.fields.get('as-path', '')\n                            as_path_list = as_path_str.split()\n\n                            if prefix and as_path_list:\n                                origin_asn = as_path_list[-1]\n                                prefix_to_asns[prefix].add(origin_asn)\n\n    moas_prefixes = {prefix: asns for prefix, asns in prefix_to_asns.items() if len(asns) > 1}\n\n    print(\"MOAS Occurrences:\", len(moas_prefixes))\n    for prefix, asns in moas_prefixes.items():\n        print(f\"Prefix: {prefix}, ASNs: {', '.join(asns)}\")\n\nif __name__ == \"__main__\":\n    detect_moas()\n```",
        "most_similar_instructions": {
            "Examine the presence and coverage of IPv6 prefixes in the local BGP updates from Sept 1 00:00 to Sept 1 02:00, 2026. Compare the number of unique IPv6 routes and origin ASNs to a reference list of expected IPv6 routes. Summarize missing or newly present routes.": 0.3111111111111111,
            "Analyze the MOAS (Multiple Origin AS) prefixes from a local BGP update file for security insights, identifying prefixes announced by multiple ASes within a specific time window.": 0.2898550724637681,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.27848101265822783,
            "Calculate the top 10 ASNs by the number of unique prefixes they originate in the local BGP updates from March 5 00:00 to March 5 01:00, 2026. Summarize each ASN and the count of unique prefixes.": 0.25,
            "Analyze the set of AS adjacencies (neighbors) for AS65001 in announcements from Dec 1 00:00 to Dec 1 01:00, 2028. Collect all ASNs that appear immediately before or after AS65001 in the AS path and summarize their frequency.": 0.24390243902439024,
            "Detect instances of AS path prepending in announcements for prefix 192.0.2.0/24 from Dec 20 00:00 to Dec 20 02:00, 2025. Summarize the number of times an AS repeats consecutively and how frequently it occurs in the observed data.": 0.23255813953488372,
            "Analyze deaggregation for any subprefixes of 10.1.0.0/16 in the local BGP updates from May 1 10:00 to May 1 11:00, 2026. Identify newly announced longer subprefixes and compare their origin AS to the origin of the parent prefix.": 0.23255813953488372,
            "Examine the growth in the number of announced IPv4 prefixes over daily intervals from Jan 1 2026 to Jan 10 2026. Summarize the total prefix counts per day and highlight days with abnormal growth or decline.": 0.23076923076923075,
            "Identify the longest and shortest AS paths for any announcements of prefix 10.0.0.0/8 from Mar 1 00:00 to Mar 1 01:00, 2025. Summarize the paths, their lengths, and the corresponding origin AS.": 0.225,
            "Analyze the next-hop address variations in BGP updates for prefix 1.1.1.0/24 from Oct 1 00:00 to Oct 1 01:00, 2026. Summarize each distinct next-hop IP and how frequently it appeared in announcements.": 0.2195121951219512
        },
        "avg_similarity_score": 0.16914539395194364
    },
    {
        "instruction": "Analyze the occurrence of MOAS (Multiple Origin AS) events in the BGP update data for prefix 203.0.113.0/24 between July 10, 2026, 14:00 and July 10, 2026, 16:00. Provide a summary of the AS paths observed and the frequency of MOAS events.",
        "input": "Time window: July 10, 2026, 14:00:00 to July 10, 2026, 16:00:00\nTarget Prefix: 203.0.113.0/24\nRecord Type: updates (Announcements)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\n\ndef analyze_moas_events():\n    target_prefix = \"203.0.113.0/24\"\n    from_time_str = \"2026-07-10 14:00:00\"\n    until_time_str = \"2026-07-10 16:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    moas_events = {}\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts = date_str + time_str\n                file_dt = datetime.strptime(file_ts, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.fields.get('prefix') == target_prefix and elem.type == 'A':\n                            as_path = elem.fields.get('as-path').split()\n                            origin_as = as_path[-1] if as_path else None\n                            if origin_as:\n                                if target_prefix not in moas_events:\n                                    moas_events[target_prefix] = set()\n                                moas_events[target_prefix].add(origin_as)\n\n    # Output MOAS events\n    print(f\"MOAS Analysis for {target_prefix}\")\n    if moas_events:\n        for prefix, origins in moas_events.items():\n            print(f\"Prefix: {prefix} had MOAS events with the following ASes: {origins}\")\n            print(f\"Total MOAS occurrences: {len(origins)}\")\n    else:\n        print(\"No MOAS events detected for this prefix in the given time window.\")\n\nif __name__ == \"__main__\":\n    analyze_moas_events()\n```",
        "most_similar_instructions": {
            "Track changes in the origin AS for prefix 203.0.113.0/24 from Nov 10 10:00 to Nov 10 11:00, 2025. Report any occurrences where the origin AS differs from the previously seen origin, indicating an origin change or possible hijack.": 0.37362637362637363,
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.32941176470588235,
            "Identify potential update storms for prefix 203.0.113.0/24 from July 1 10:00 to July 1 10:15, 2027 by counting consecutive announcements and withdrawals. Mark intervals with more than 50 updates as an update storm.": 0.3255813953488372,
            "Analyze the presence of MOAS (Multiple Origin AS) prefixes in BGP updates files for the date range of January 1, 2028, to January 2, 2028. Report the number of MOAS occurrences and list the prefixes involved along with the ASNs announcing them.": 0.3146067415730337,
            "Analyze the range of MED values and the most common community tags associated with BGP update messages for ASN 4766 from Oct 28 13:00 to Oct 28 14:00, 2024. Provide a summary of average MED values and frequently observed community tags.": 0.3111111111111111,
            "Detect instances of AS path prepending in announcements for prefix 192.0.2.0/24 from Dec 20 00:00 to Dec 20 02:00, 2025. Summarize the number of times an AS repeats consecutively and how frequently it occurs in the observed data.": 0.3076923076923077,
            "Detect and summarize usage of the ATOMIC_AGGREGATE path attribute in announcements for prefix 192.168.1.0/24 from Dec 10 00:00 to Dec 10 01:00, 2027. List each occurrence, the origin AS, and the as-path when ATOMIC_AGGREGATE is set.": 0.3043478260869565,
            "Detect any MOAS (Multiple Origin AS) events for prefix 203.1.2.0/24 from Nov 1 12:00 to Nov 1 13:00, 2025, and cross-check if any of these additional origins might indicate a hijack (e.g., unknown or suspicious AS not typically announcing the prefix). Summarize potential hijack incidents.": 0.3,
            "Identify and summarize BGP communities observed for prefix 9.9.9.0/24 from Feb 1 08:00 to Feb 1 10:00, 2025. List unique communities and the frequency of their appearance in route announcements.": 0.2891566265060241,
            "Identify the longest and shortest AS paths for any announcements of prefix 10.0.0.0/8 from Mar 1 00:00 to Mar 1 01:00, 2025. Summarize the paths, their lengths, and the corresponding origin AS.": 0.28235294117647053
        },
        "avg_similarity_score": 0.22670344888622637
    },
    {
        "instruction": "Analyze the historical trends of MOAS (Multiple Origin AS) prefixes from Jan 01 00:00 to Jan 31 23:59, 2023. Identify the top 5 most frequently occurring MOAS prefixes and the ASes involved.",
        "input": "Time window: Jan 01, 2023, 00:00:00 to Jan 31, 2023, 23:59:59\nRecord Type: updates (Announcements)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nimport pandas as pd\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_trends():\n    from_time_str = \"2023-01-01 00:00:00\"\n    until_time_str = \"2023-01-31 23:59:59\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    moas_prefixes = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_dt = datetime.strptime(date_str + time_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        ts = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if ts < from_time or ts > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            fields = elem.fields\n                            prefix = fields.get('prefix')\n                            as_path_str = fields.get('as-path', '')\n                            as_path_list = as_path_str.split()\n\n                            if prefix and len(as_path_list) > 0:\n                                origin_as = as_path_list[-1]\n                                moas_prefixes[prefix].add(origin_as)\n\n    moas_data = [(prefix, len(origins), origins) for prefix, origins in moas_prefixes.items() if len(origins) > 1]\n    df_moas = pd.DataFrame(moas_data, columns=[\"prefix\", \"num_asns\", \"asns\"]).sort_values(by=\"num_asns\", ascending=False)\n\n    top_5_moas = df_moas.head(5)\n\n    if not top_5_moas.empty:\n        print(\"Top 5 MOAS Prefixes from Jan 01 to Jan 31, 2023\")\n        print(top_5_moas)\n    else:\n        print(\"No MOAS instances detected in the given time window.\")\n\nif __name__ == \"__main__\":\n    analyze_moas_trends()\n```",
        "most_similar_instructions": {
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.39436619718309857,
            "Analyze the presence of MOAS (Multiple Origin AS) prefixes in BGP updates files for the date range of January 1, 2028, to January 2, 2028. Report the number of MOAS occurrences and list the prefixes involved along with the ASNs announcing them.": 0.36842105263157887,
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.3611111111111111,
            "Analyze the MOAS (Multiple Origin AS) prefixes from a local BGP update file for security insights, identifying prefixes announced by multiple ASes within a specific time window.": 0.3278688524590164,
            "Analyze the occurrence of MOAS (Multiple Origin AS) events in the BGP update data for prefix 203.0.113.0/24 between July 10, 2026, 14:00 and July 10, 2026, 16:00. Provide a summary of the AS paths observed and the frequency of MOAS events.": 0.2962962962962963,
            "Check for any private (64512\u201365534, 4200000000\u20134294967294) or reserved ASNs in the AS paths of announcements from Jan 3 12:00 to Jan 3 13:00, 2027. Summarize the prefixes and AS paths where such ASNs appear.": 0.27777777777777773,
            "Calculate the top 10 ASNs by the number of unique prefixes they originate in the local BGP updates from March 5 00:00 to March 5 01:00, 2026. Summarize each ASN and the count of unique prefixes.": 0.27777777777777773,
            "Analyze the set of AS adjacencies (neighbors) for AS65001 in announcements from Dec 1 00:00 to Dec 1 01:00, 2028. Collect all ASNs that appear immediately before or after AS65001 in the AS path and summarize their frequency.": 0.27027027027027023,
            "Provide a summary of unique prefixes and origin ASes associated with AS4766 from Oct 28 13:00 to 13:15, 2024. Track the count of unique prefixes and changes in origin ASes, if any.": 0.2647058823529412,
            "Identify any newly announced subprefixes of 10.1.0.0/16 from Jan 1 00:00 to Jan 1 01:00, 2027 and check if their origin AS differs from that of the parent prefix.": 0.2608695652173913
        },
        "avg_similarity_score": 0.20494665691431418
    },
    {
        "instruction": "Analyze the occurrence of Multiple Origin AS (MOAS) conflicts for prefixes advertised from Jan 2 08:00 to Jan 2 09:00, 2026. Identify prefixes with more than one origin AS and count the occurrences for each prefix.",
        "input": "Time window: Jan 2, 2026, 08:00:00 to Jan 2, 2026, 09:00:00\nRecord Type: updates (Announcements)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_conflicts():\n    from_time_str = \"2026-01-02 08:00:00\"\n    until_time_str = \"2026-01-02 09:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    # Dictionary: prefix -> set of observed origin ASes\n    moas_data = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        ts = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if ts < from_time or ts > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            fields = elem.fields\n                            as_path = fields.get('as-path', '').split()\n                            if as_path:\n                                prefix = fields.get('prefix')\n                                origin_as = as_path[-1]\n                                if prefix and origin_as:\n                                    moas_data[prefix].add(origin_as)\n\n    moas_results = {pfx: list(origins) for pfx, origins in moas_data.items() if len(origins) > 1}\n\n    if moas_results:\n        print(\"MOAS Conflicts:\")\n        for prefix, origins in moas_results.items():\n            print(f\"Prefix: {prefix}, Origin ASes: {', '.join(origins)}\")\n    else:\n        print(\"No MOAS conflicts found in the specified time window.\")\n\nif __name__ == \"__main__\":\n    analyze_moas_conflicts()\n```",
        "most_similar_instructions": {
            "Analyze changes in the LOCAL_PREF (Local Preference) attribute for routes advertised by AS65501 from Jan 2 08:00 to Jan 2 09:00, 2026. Track distinct LOCAL_PREF values and how often they change for each prefix.": 0.5,
            "Analyze the historical trends of MOAS (Multiple Origin AS) prefixes from Jan 01 00:00 to Jan 31 23:59, 2023. Identify the top 5 most frequently occurring MOAS prefixes and the ASes involved.": 0.4444444444444444,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.4266666666666667,
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.3157894736842105,
            "Analyze the occurrence of MOAS (Multiple Origin AS) events in the BGP update data for prefix 203.0.113.0/24 between July 10, 2026, 14:00 and July 10, 2026, 16:00. Provide a summary of the AS paths observed and the frequency of MOAS events.": 0.3058823529411765,
            "Identify any newly announced subprefixes of 10.1.0.0/16 from Jan 1 00:00 to Jan 1 01:00, 2027 and check if their origin AS differs from that of the parent prefix.": 0.3013698630136986,
            "Analyze the presence of MOAS (Multiple Origin AS) prefixes in BGP updates files for the date range of January 1, 2028, to January 2, 2028. Report the number of MOAS occurrences and list the prefixes involved along with the ASNs announcing them.": 0.3,
            "Analyze deaggregation for any subprefixes of 10.1.0.0/16 in the local BGP updates from May 1 10:00 to May 1 11:00, 2026. Identify newly announced longer subprefixes and compare their origin AS to the origin of the parent prefix.": 0.2926829268292683,
            "Analyze the set of AS adjacencies (neighbors) for AS65001 in announcements from Dec 1 00:00 to Dec 1 01:00, 2028. Collect all ASNs that appear immediately before or after AS65001 in the AS path and summarize their frequency.": 0.28205128205128205,
            "Examine the growth in the number of announced IPv4 prefixes over daily intervals from Jan 1 2026 to Jan 10 2026. Summarize the total prefix counts per day and highlight days with abnormal growth or decline.": 0.27027027027027023
        },
        "avg_similarity_score": 0.22886278409233501
    },
    {
        "instruction": "Analyze the instances of MOAS (Multiple Origin AS) for the prefix 2.2.2.0/24 in BGP updates from Nov 15 00:00 to Nov 15 02:00, 2026, and identify any security implications.",
        "input": "Time window: Nov 15, 2026, 00:00:00 to Nov 15, 2026, 02:00:00\nTarget Prefix: 2.2.2.0/24\nRecord Type: updates (Announcements)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_instances():\n    prefix_of_interest = \"2.2.2.0/24\"\n    from_time_str = \"2026-11-15 00:00:00\"\n    until_time_str = \"2026-11-15 02:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    # Dictionary to track AS origins for prefixes\n    prefix_origin_as_map = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_dt = datetime.strptime(date_str + time_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n\n                # Set up BGPStream\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                # Process each record\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_time = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if elem_time < from_time or elem_time > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            fields = elem.fields\n                            prefix = fields.get('prefix')\n                            if prefix == prefix_of_interest:\n                                as_path = fields.get('as-path', '').split()\n                                origin_as = as_path[-1] if as_path else None\n                                if origin_as:\n                                    prefix_origin_as_map[prefix].add(origin_as)\n\n    # Analyze MOAS\n    for prefix, origin_ases in prefix_origin_as_map.items():\n        if len(origin_ases) > 1:\n            print(f\"MOAS Detected for {prefix}: Origin ASes: {', '.join(origin_ases)}\")\n            print(\"Security Implications: Potential for route hijacking or misconfiguration.\")\n\nif __name__ == \"__main__\":\n    analyze_moas_instances()\n```",
        "most_similar_instructions": {
            "Detect any MOAS (Multiple Origin AS) events for prefix 203.1.2.0/24 from Nov 1 12:00 to Nov 1 13:00, 2025, and cross-check if any of these additional origins might indicate a hijack (e.g., unknown or suspicious AS not typically announcing the prefix). Summarize potential hijack incidents.": 0.38636363636363635,
            "Detect instances of AS path prepending in announcements for prefix 192.0.2.0/24 from Dec 20 00:00 to Dec 20 02:00, 2025. Summarize the number of times an AS repeats consecutively and how frequently it occurs in the observed data.": 0.379746835443038,
            "Analyze the occurrence of Multiple Origin AS (MOAS) conflicts for prefixes advertised from Jan 2 08:00 to Jan 2 09:00, 2026. Identify prefixes with more than one origin AS and count the occurrences for each prefix.": 0.35616438356164387,
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.35616438356164387,
            "Track changes in the origin AS for prefix 203.0.113.0/24 from Nov 10 10:00 to Nov 10 11:00, 2025. Report any occurrences where the origin AS differs from the previously seen origin, indicating an origin change or possible hijack.": 0.35443037974683544,
            "Analyze the historical trends of MOAS (Multiple Origin AS) prefixes from Jan 01 00:00 to Jan 31 23:59, 2023. Identify the top 5 most frequently occurring MOAS prefixes and the ASes involved.": 0.3478260869565218,
            "Analyze the next-hop address variations in BGP updates for prefix 1.1.1.0/24 from Oct 1 00:00 to Oct 1 01:00, 2026. Summarize each distinct next-hop IP and how frequently it appeared in announcements.": 0.3466666666666667,
            "Analyze the occurrence of MOAS (Multiple Origin AS) events in the BGP update data for prefix 203.0.113.0/24 between July 10, 2026, 14:00 and July 10, 2026, 16:00. Provide a summary of the AS paths observed and the frequency of MOAS events.": 0.34146341463414637,
            "Calculate the top 10 ASNs by the number of unique prefixes they originate in the local BGP updates from March 5 00:00 to March 5 01:00, 2026. Summarize each ASN and the count of unique prefixes.": 0.3287671232876712,
            "Analyze the set of AS adjacencies (neighbors) for AS65001 in announcements from Dec 1 00:00 to Dec 1 01:00, 2028. Collect all ASNs that appear immediately before or after AS65001 in the AS path and summarize their frequency.": 0.32
        },
        "avg_similarity_score": 0.25319507729612145
    },
    {
        "instruction": "Analyze the AS path inflation for prefix 8.8.8.0/24 from Oct 2 00:00 to Oct 2 01:00, 2026, by comparing the path lengths from different collectors. Identify the collector with the minimum and maximum average path length.",
        "input": "Time window: Oct 2, 2026, 00:00:00 to Oct 2, 2026, 01:00:00\nTarget Prefix: 8.8.8.0/24\nRecord Type: updates (Announcements)\nCollectors: rrc00, rrc01",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nimport pandas as pd\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_as_path_inflation():\n    prefix_of_interest = \"8.8.8.0/24\"\n    from_time_str = \"2026-10-02 00:00:00\"\n    until_time_str = \"2026-10-02 01:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    collectors = [\"rrc00\", \"rrc01\"]\n    directory = \"/path/to/local/bgp/updates\"\n\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    # Dictionary to store path lengths per collector\n    collector_path_lengths = defaultdict(list)\n\n    for collector in collectors:\n        collector_dir = os.path.join(directory, collector)\n        for root, _, files in os.walk(collector_dir):\n            for file in files:\n                match = re.match(pattern, file)\n                if match:\n                    date_str = match.group(1)\n                    time_str = match.group(2)\n                    file_dt = datetime.strptime(date_str + time_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                    if file_dt < from_time or file_dt > until_time:\n                        continue\n\n                    file_path = os.path.join(root, file)\n\n                    # Set up BGPStream\n                    stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                    stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                    # Process each record\n                    for rec in stream.records():\n                        for elem in rec:\n                            elem_time = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                            if elem_time < from_time or elem_time > until_time:\n                                continue\n\n                            if elem.type == 'A':\n                                fields = elem.fields\n                                prefix = fields.get('prefix')\n                                if prefix == prefix_of_interest:\n                                    as_path = fields.get('as-path')\n                                    if as_path:\n                                        path_length = len(as_path.split())\n                                        collector_path_lengths[collector].append(path_length)\n\n    if collector_path_lengths:\n        avg_path_lengths = {collector: sum(lengths) / len(lengths) for collector, lengths in collector_path_lengths.items()}\n        collector_with_min_path = min(avg_path_lengths, key=avg_path_lengths.get)\n        collector_with_max_path = max(avg_path_lengths, key=avg_path_lengths.get)\n\n        print(f\"Collector with minimum average path length: {collector_with_min_path} ({avg_path_lengths[collector_with_min_path]:.2f})\")\n        print(f\"Collector with maximum average path length: {collector_with_max_path} ({avg_path_lengths[collector_with_max_path]:.2f})\")\n    else:\n        print(\"No path lengths found for 8.8.8.0/24 in the specified time window.\")\n\nif __name__ == \"__main__\":\n    analyze_as_path_inflation()\n```",
        "most_similar_instructions": {
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.42500000000000004,
            "Find any AS path loops for prefix 192.168.10.0/24 from Oct 20 00:00 to Oct 20 01:00, 2028. An AS loop occurs if an ASN reappears non-consecutively within the path. Summarize looped paths and timestamps.": 0.4096385542168674,
            "Detect any loops in the AS path for prefix 8.8.0.0/16 from Feb 1 00:00 to Feb 1 02:00, 2026. An AS path loop occurs if the same ASN appears multiple times non-consecutively within the path. Summarize each path and the loop encountered.": 0.39560439560439564,
            "Analyze the next-hop address variations in BGP updates for prefix 1.1.1.0/24 from Oct 1 00:00 to Oct 1 01:00, 2026. Summarize each distinct next-hop IP and how frequently it appeared in announcements.": 0.3902439024390244,
            "Analyze the instances of MOAS (Multiple Origin AS) for the prefix 2.2.2.0/24 in BGP updates from Nov 15 00:00 to Nov 15 02:00, 2026, and identify any security implications.": 0.3636363636363636,
            "Identify the longest and shortest AS paths for any announcements of prefix 10.0.0.0/8 from Mar 1 00:00 to Mar 1 01:00, 2025. Summarize the paths, their lengths, and the corresponding origin AS.": 0.35,
            "Analyze the occurrence of Multiple Origin AS (MOAS) conflicts for prefixes advertised from Jan 2 08:00 to Jan 2 09:00, 2026. Identify prefixes with more than one origin AS and count the occurrences for each prefix.": 0.35,
            "Detect and summarize usage of the ATOMIC_AGGREGATE path attribute in announcements for prefix 192.168.1.0/24 from Dec 10 00:00 to Dec 10 01:00, 2027. List each occurrence, the origin AS, and the as-path when ATOMIC_AGGREGATE is set.": 0.3448275862068965,
            "Analyze the set of AS adjacencies (neighbors) for AS65001 in announcements from Dec 1 00:00 to Dec 1 01:00, 2028. Collect all ASNs that appear immediately before or after AS65001 in the AS path and summarize their frequency.": 0.3170731707317073,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.3037974683544304
        },
        "avg_similarity_score": 0.2457105592824555
    },
    {
        "instruction": "Analyze the multiple origin AS (MOAS) prefixes from March 1 to March 7, 2023, and identify any prefixes that have been announced by more than one AS during this period. Provide a summary including prefix, originating ASes, and the number of occurrences.",
        "input": "Time window: March 1, 2023, 00:00:00 to March 7, 2023, 23:59:59\nRecord Type: updates",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_prefixes():\n    from_time_str = \"2023-03-01 00:00:00\"\n    until_time_str = \"2023-03-07 23:59:59\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    # Dictionary to hold the mapping of prefix to a set of originating ASes\n    moas_prefixes = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_timestamp = date_str + time_str\n                file_dt = datetime.strptime(file_timestamp, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            prefix = elem.fields.get('prefix')\n                            as_path = elem.fields.get('as-path')\n                            if prefix and as_path:\n                                originating_as = as_path.split(' ')[0]\n                                moas_prefixes[prefix].add(originating_as)\n\n    # Filter MOAS prefixes\n    moas_summary = [\n        {\"prefix\": prefix, \"originating_as\": list(originating_as), \"count\": len(originating_as)}\n        for prefix, originating_as in moas_prefixes.items() if len(originating_as) > 1\n    ]\n\n    # Print results\n    print(\"MOAS Prefixes Summary (March 1 - March 7, 2023):\")\n    for entry in moas_summary:\n        print(f\"Prefix: {entry['prefix']}, Originating ASes: {entry['originating_as']}, Count: {entry['count']}\")\n\nif __name__ == \"__main__\":\n    analyze_moas_prefixes()\n```",
        "most_similar_instructions": {
            "Analyze the occurrence of Multiple Origin AS (MOAS) conflicts for prefixes advertised from Jan 2 08:00 to Jan 2 09:00, 2026. Identify prefixes with more than one origin AS and count the occurrences for each prefix.": 0.45,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.3544303797468354,
            "Analyze the historical trends of MOAS (Multiple Origin AS) prefixes from Jan 01 00:00 to Jan 31 23:59, 2023. Identify the top 5 most frequently occurring MOAS prefixes and the ASes involved.": 0.34210526315789475,
            "Analyze the MOAS (Multiple Origin AS) prefixes from a local BGP update file for security insights, identifying prefixes announced by multiple ASes within a specific time window.": 0.3188405797101449,
            "Analyze the presence of MOAS (Multiple Origin AS) prefixes in BGP updates files for the date range of January 1, 2028, to January 2, 2028. Report the number of MOAS occurrences and list the prefixes involved along with the ASNs announcing them.": 0.2857142857142857,
            "Analyze the occurrence of MOAS (Multiple Origin AS) events in the BGP update data for prefix 203.0.113.0/24 between July 10, 2026, 14:00 and July 10, 2026, 16:00. Provide a summary of the AS paths observed and the frequency of MOAS events.": 0.2696629213483146,
            "Analyze the instances of MOAS (Multiple Origin AS) for the prefix 2.2.2.0/24 in BGP updates from Nov 15 00:00 to Nov 15 02:00, 2026, and identify any security implications.": 0.25974025974025977,
            "Analyze deaggregation for any subprefixes of 10.1.0.0/16 in the local BGP updates from May 1 10:00 to May 1 11:00, 2026. Identify newly announced longer subprefixes and compare their origin AS to the origin of the parent prefix.": 0.23255813953488372,
            "Calculate the top 10 ASNs by the number of unique prefixes they originate in the local BGP updates from March 5 00:00 to March 5 01:00, 2026. Summarize each ASN and the count of unique prefixes.": 0.225,
            "Analyze the set of AS adjacencies (neighbors) for AS65001 in announcements from Dec 1 00:00 to Dec 1 01:00, 2028. Collect all ASNs that appear immediately before or after AS65001 in the AS path and summarize their frequency.": 0.2195121951219512
        },
        "avg_similarity_score": 0.1744570123579067
    },
    {
        "instruction": "Analyze MOAS (Multiple Origin AS) prefixes for the time window between Feb 1, 2025, 00:00:00 and Feb 2, 2025, 00:00:00 from local BGP update files. Identify prefixes announced by multiple ASes and their frequency.",
        "input": "Time window: Feb 1, 2025, 00:00:00 to Feb 2, 2025, 00:00:00\nRecord Type: updates",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_prefixes():\n    from_time_str = \"2025-02-01 00:00:00\"\n    until_time_str = \"2025-02-02 00:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    moas_prefixes = defaultdict(set)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            prefix = elem.fields.get('prefix')\n                            as_path = elem.fields.get('as-path', '').split()\n                            if as_path:\n                                origin_as = as_path[-1]\n                                moas_prefixes[prefix].add(origin_as)\n\n    moas_results = {prefix: list(as_set) for prefix, as_set in moas_prefixes.items() if len(as_set) > 1}\n\n    print(\"MOAS (Multiple Origin AS) Prefix Analysis\")\n    print(\"-----------------------------------------\")\n    for prefix, origins in moas_results.items():\n        print(f\"Prefix: {prefix}, Origin ASes: {', '.join(origins)}\")\n\nif __name__ == \"__main__\":\n    analyze_moas_prefixes()\n```",
        "most_similar_instructions": {
            "Analyze the MOAS (Multiple Origin AS) prefixes from a local BGP update file for security insights, identifying prefixes announced by multiple ASes within a specific time window.": 0.46153846153846156,
            "Analyze the instances of MOAS (Multiple Origin AS) for the prefix 2.2.2.0/24 in BGP updates from Nov 15 00:00 to Nov 15 02:00, 2026, and identify any security implications.": 0.3287671232876712,
            "Analyze the multiple origin AS (MOAS) prefixes from March 1 to March 7, 2023, and identify any prefixes that have been announced by more than one AS during this period. Provide a summary including prefix, originating ASes, and the number of occurrences.": 0.32500000000000007,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.32,
            "Analyze the historical trends of MOAS (Multiple Origin AS) prefixes from Jan 01 00:00 to Jan 31 23:59, 2023. Identify the top 5 most frequently occurring MOAS prefixes and the ASes involved.": 0.30555555555555564,
            "Analyze the occurrence of Multiple Origin AS (MOAS) conflicts for prefixes advertised from Jan 2 08:00 to Jan 2 09:00, 2026. Identify prefixes with more than one origin AS and count the occurrences for each prefix.": 0.2894736842105263,
            "Analyze the occurrence of MOAS (Multiple Origin AS) events in the BGP update data for prefix 203.0.113.0/24 between July 10, 2026, 14:00 and July 10, 2026, 16:00. Provide a summary of the AS paths observed and the frequency of MOAS events.": 0.28235294117647053,
            "Analyze the presence of MOAS (Multiple Origin AS) prefixes in BGP updates files for the date range of January 1, 2028, to January 2, 2028. Report the number of MOAS occurrences and list the prefixes involved along with the ASNs announcing them.": 0.2750000000000001,
            "Compare current announcements for prefix 198.18.0.0/16 from Aug 1 00:00 to Aug 1 01:00, 2025 with historical data from Jul 1 00:00 to Jul 1 01:00, 2025. Identify differences in AS path length, origin AS, and announcement volume.": 0.2619047619047619,
            "Analyze usage of well-known BGP communities (e.g., NO_EXPORT, NO_ADVERTISE, GRACEFUL_SHUTDOWN, etc.) for any announcements from AS66666 between June 1 00:00 and June 1 01:00, 2026. Summarize each well-known community and its frequency.": 0.25641025641025644
        },
        "avg_similarity_score": 0.19578294730982224
    },
    {
        "instruction": "Analyze AS path inflation in BGP update files to identify potential security threats and unusual routing behavior. Focus on AS paths that exceed a length of 10 within the time window of January 10, 2028, 00:00:00 to January 10, 2028, 01:00:00. Provide insights into possible misconfigurations or path manipulations.",
        "input": "Time window: January 10, 2028, 00:00:00 to January 10, 2028, 01:00:00\nAS path length threshold: > 10",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\n\ndef analyze_as_path_inflation():\n    as_path_length_threshold = 10\n    from_time_str = \"2028-01-10 00:00:00\"\n    until_time_str = \"2028-01-10 01:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    as_path_inflation_cases = []\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            as_path = elem.fields.get('as-path', '').split()\n                            if len(as_path) > as_path_length_threshold:\n                                as_path_inflation_cases.append({\n                                    'timestamp': elem_dt,\n                                    'prefix': elem.fields.get('prefix'),\n                                    'as_path': as_path\n                                })\n\n    if as_path_inflation_cases:\n        print(\"Potential AS Path Inflation Detected:\")\n        for case in as_path_inflation_cases:\n            print(f\"Timestamp: {case['timestamp']}, Prefix: {case['prefix']}, AS Path: {' '.join(case['as_path'])}\")\n    else:\n        print(\"No AS Path Inflation Detected in the Given Time Window.\")\n\nif __name__ == \"__main__\":\n    analyze_as_path_inflation()\n```",
        "most_similar_instructions": {
            "Analyze the presence of MOAS (Multiple Origin AS) prefixes in BGP updates files for the date range of January 1, 2028, to January 2, 2028. Report the number of MOAS occurrences and list the prefixes involved along with the ASNs announcing them.": 0.25263157894736843,
            "Identify the longest and shortest AS paths for any announcements of prefix 10.0.0.0/8 from Mar 1 00:00 to Mar 1 01:00, 2025. Summarize the paths, their lengths, and the corresponding origin AS.": 0.2417582417582418,
            "Detect and summarize usage of the ATOMIC_AGGREGATE path attribute in announcements for prefix 192.168.1.0/24 from Dec 10 00:00 to Dec 10 01:00, 2027. List each occurrence, the origin AS, and the as-path when ATOMIC_AGGREGATE is set.": 0.22448979591836737,
            "Analyze MOAS (Multiple Origin AS) prefixes for the time window between Feb 1, 2025, 00:00:00 and Feb 2, 2025, 00:00:00 from local BGP update files. Identify prefixes announced by multiple ASes and their frequency.": 0.21978021978021978,
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.21978021978021978,
            "Identify and log BGP peer session up/down events for any monitored peers within the time window Mar 2 00:00 to Mar 2 02:00, 2027. Summarize each session's state changes and the timestamps of these events.": 0.21739130434782608,
            "Analyze the set of AS adjacencies (neighbors) for AS65001 in announcements from Dec 1 00:00 to Dec 1 01:00, 2028. Collect all ASNs that appear immediately before or after AS65001 in the AS path and summarize their frequency.": 0.21505376344086022,
            "Compare the average AS path length for IPv6 routes vs. IPv4 routes announced between May 10 00:00 and May 10 01:00, 2028. Summarize the count of unique IPv4 prefixes, unique IPv6 prefixes, and their respective mean AS path lengths.": 0.2127659574468085,
            "Analyze the AS path inflation for prefix 8.8.8.0/24 from Oct 2 00:00 to Oct 2 01:00, 2026, by comparing the path lengths from different collectors. Identify the collector with the minimum and maximum average path length.": 0.21052631578947367,
            "Analyze the occurrence of MOAS (Multiple Origin AS) events in the BGP update data for prefix 203.0.113.0/24 between July 10, 2026, 14:00 and July 10, 2026, 16:00. Provide a summary of the AS paths observed and the frequency of MOAS events.": 0.2
        },
        "avg_similarity_score": 0.15907669072055797
    }
]