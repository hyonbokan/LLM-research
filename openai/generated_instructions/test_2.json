[
    {
        "instruction": "Analyze the AS path inflation by comparing the average AS path length for the prefix 192.0.2.0/24 announced by AS12345 in the time window of January 10, 2026, 09:00:00 to January 10, 2026, 11:00:00. Provide insights on any unusual path inflation events during this period.",
        "input": "Time window: January 10, 2026, 09:00:00 to January 10, 2026, 11:00:00\nPrefix: 192.0.2.0/24\nTarget ASN: 12345\nRecord Type: updates (AS_PATH)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_as_path_inflation():\n    target_asn = \"12345\"\n    target_prefix = \"192.0.2.0/24\"\n    from_time_str = \"2026-01-10 09:00:00\"\n    until_time_str = \"2026-01-10 11:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    as_path_lengths = []\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_time = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n\n                        if elem_time < from_time or elem_time > until_time:\n                            continue\n\n                        if elem.type == 'A' and target_prefix in elem.fields['prefix']:\n                            as_path = elem.fields.get('as-path', '').split()\n                            if as_path and as_path[-1] == target_asn:\n                                as_path_length = len(as_path)\n                                as_path_lengths.append(as_path_length)\n\n    if as_path_lengths:\n        avg_as_path_length = sum(as_path_lengths) / len(as_path_lengths)\n        max_as_path_length = max(as_path_lengths)\n        min_as_path_length = min(as_path_lengths)\n        print(f\"Average AS Path Length: {avg_as_path_length}\")\n        print(f\"Maximum AS Path Length: {max_as_path_length}\")\n        print(f\"Minimum AS Path Length: {min_as_path_length}\")\n        if max_as_path_length > avg_as_path_length * 1.5:  # Assuming 50% more than average as inflation\n            print(\"Unusual path inflation detected.\")\n    else:\n        print(\"No AS path data available for the specified prefix and time window.\")\n\nif __name__ == \"__main__\":\n    analyze_as_path_inflation()\n```",
        "most_similar_instructions": {
            "Track changes in the origin AS for prefix 203.0.113.0/24 from Nov 10 10:00 to Nov 10 11:00, 2025. Report any occurrences where the origin AS differs from the previously seen origin, indicating an origin change or possible hijack.": 0.2916666666666667,
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.2888888888888889,
            "Detect and summarize usage of the ATOMIC_AGGREGATE path attribute in announcements for prefix 192.168.1.0/24 from Dec 10 00:00 to Dec 10 01:00, 2027. List each occurrence, the origin AS, and the as-path when ATOMIC_AGGREGATE is set.": 0.288659793814433,
            "Compare the average AS path length for IPv6 routes vs. IPv4 routes announced between May 10 00:00 and May 10 01:00, 2028. Summarize the count of unique IPv4 prefixes, unique IPv6 prefixes, and their respective mean AS path lengths.": 0.27956989247311825,
            "Detect instances of AS path prepending in announcements for prefix 192.0.2.0/24 from Dec 20 00:00 to Dec 20 02:00, 2025. Summarize the number of times an AS repeats consecutively and how frequently it occurs in the observed data.": 0.27083333333333337,
            "Determine if prefix 203.0.113.0/24 is flapping (excessive announcements and withdrawals) within the time window May 5 09:00 to May 5 10:00, 2025. Summarize total announcements, total withdrawals, and flag a flap if announcements+withdrawals exceed 20 events in any 5-minute interval.": 0.26,
            "Find any AS path loops for prefix 192.168.10.0/24 from Oct 20 00:00 to Oct 20 01:00, 2028. An AS loop occurs if an ASN reappears non-consecutively within the path. Summarize looped paths and timestamps.": 0.25806451612903225,
            "Correlate significant prefix flapping for 192.0.2.0/24 with a known outage window (Mar 15 00:00 to Mar 15 00:30, 2028). Identify announcements/withdrawals exceeding 30 events in 5 minutes and check if they align with reported outages.": 0.25531914893617025,
            "Track the changes in the Multi-Exit Discriminator (MED) attribute for routes originating from AS65001 from June 10 00:00 to June 10 01:00, 2025. Summarize each prefix, the range of MED values observed, and any unusual fluctuations.": 0.24175824175824173,
            "Detect any loops in the AS path for prefix 8.8.0.0/16 from Feb 1 00:00 to Feb 1 02:00, 2026. An AS path loop occurs if the same ASN appears multiple times non-consecutively within the path. Summarize each path and the loop encountered.": 0.23762376237623764
        },
        "avg_similarity_score": 0.18889717301752157
    },
    {
        "instruction": "Analyze the occurrence of MOAS (Multiple Origin AS) prefixes in a specific time window from locally stored BGP update files. Identify and list all MOAS prefixes along with the ASNs that originated them.",
        "input": "Time window: March 15, 2026, 12:00:00 to March 15, 2026, 13:00:00\nRecord Type: updates (Announcements)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_prefixes():\n    from_time_str = \"2026-03-15 12:00:00\"\n    until_time_str = \"2026-03-15 13:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    moas_prefixes = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_time = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n\n                        if elem_time < from_time or elem_time > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            prefix = elem.fields.get('prefix', '')\n                            as_path = elem.fields.get('as-path', '').split()\n                            if as_path:\n                                origin_as = as_path[-1]\n                                moas_prefixes[prefix].add(origin_as)\n\n    moas_detected = {prefix: list(asns) for prefix, asns in moas_prefixes.items() if len(asns) > 1}\n\n    if moas_detected:\n        print(\"MOAS Prefixes Detected:\")\n        for prefix, asns in moas_detected.items():\n            print(f\"Prefix: {prefix}, Origin ASNs: {asns}\")\n    else:\n        print(\"No MOAS prefixes detected in the specified time window.\")\n\nif __name__ == \"__main__\":\n    analyze_moas_prefixes()\n```",
        "most_similar_instructions": {
            "Analyze the set of AS adjacencies (neighbors) for AS65001 in announcements from Dec 1 00:00 to Dec 1 01:00, 2028. Collect all ASNs that appear immediately before or after AS65001 in the AS path and summarize their frequency.": 0.24657534246575344,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.22857142857142856,
            "Calculate the top 10 ASNs by the number of unique prefixes they originate in the local BGP updates from March 5 00:00 to March 5 01:00, 2026. Summarize each ASN and the count of unique prefixes.": 0.1971830985915493,
            "Analyze deaggregation for any subprefixes of 10.1.0.0/16 in the local BGP updates from May 1 10:00 to May 1 11:00, 2026. Identify newly announced longer subprefixes and compare their origin AS to the origin of the parent prefix.": 0.18181818181818182,
            "Examine the growth in the number of announced IPv4 prefixes over daily intervals from Jan 1 2026 to Jan 10 2026. Summarize the total prefix counts per day and highlight days with abnormal growth or decline.": 0.17391304347826086,
            "Examine the presence and coverage of IPv6 prefixes in the local BGP updates from Sept 1 00:00 to Sept 1 02:00, 2026. Compare the number of unique IPv6 routes and origin ASNs to a reference list of expected IPv6 routes. Summarize missing or newly present routes.": 0.1728395061728395,
            "Detect any MOAS (Multiple Origin AS) events for prefix 203.1.2.0/24 from Nov 1 12:00 to Nov 1 13:00, 2025, and cross-check if any of these additional origins might indicate a hijack (e.g., unknown or suspicious AS not typically announcing the prefix). Summarize potential hijack incidents.": 0.1627906976744186,
            "Summarize the total count of BGP update messages (announcements and withdrawals) for AS4766 within the time window from Oct 28 13:00 to Oct 28 13:15, 2024. Include the minimum, maximum, and median number of updates observed during this period.": 0.16216216216216217,
            "Analyze the range of MED values and the most common community tags associated with BGP update messages for ASN 4766 from Oct 28 13:00 to Oct 28 14:00, 2024. Provide a summary of average MED values and frequently observed community tags.": 0.15789473684210528,
            "Detect instances of AS path prepending in announcements for prefix 192.0.2.0/24 from Dec 20 00:00 to Dec 20 02:00, 2025. Summarize the number of times an AS repeats consecutively and how frequently it occurs in the observed data.": 0.15584415584415584
        },
        "avg_similarity_score": 0.12734136301395552
    },
    {
        "instruction": "Analyze MOAS (Multiple Origin AS) prefixes from a local BGP update file and identify prefixes announced by more than one ASN. Focus on updates from Jan 15 00:00 to Jan 15 01:00, 2029 and provide a summary of these prefixes with their respective ASNs.",
        "input": "Time window: Jan 15, 2029, 00:00:00 to Jan 15, 2029, 01:00:00\nRecord Type: updates (Announcements)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_prefixes():\n    from_time_str = \"2029-01-15 00:00:00\"\n    until_time_str = \"2029-01-15 01:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    moas_prefixes = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_dt = datetime.strptime(date_str + time_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            prefix = elem.fields.get('prefix', '')\n                            as_path = elem.fields.get('as-path', '')\n                            origin_asn = as_path.split()[-1] if as_path else None\n\n                            if origin_asn:\n                                moas_prefixes[prefix].add(origin_asn)\n\n    moas_summary = {prefix: list(asns) for prefix, asns in moas_prefixes.items() if len(asns) > 1}\n\n    if moas_summary:\n        print(\"MOAS Prefix Analysis:\")\n        for prefix, asns in moas_summary.items():\n            print(f\"Prefix: {prefix}, Origin ASNs: {', '.join(asns)}\")\n    else:\n        print(\"No MOAS prefixes found in the specified time window.\")\n\nif __name__ == \"__main__\":\n    analyze_moas_prefixes()\n```",
        "most_similar_instructions": {
            "Analyze the occurrence of MOAS (Multiple Origin AS) prefixes in a specific time window from locally stored BGP update files. Identify and list all MOAS prefixes along with the ASNs that originated them.": 0.35443037974683544,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.3373493975903615,
            "Calculate the top 10 ASNs by the number of unique prefixes they originate in the local BGP updates from March 5 00:00 to March 5 01:00, 2026. Summarize each ASN and the count of unique prefixes.": 0.30952380952380953,
            "Identify any newly announced subprefixes of 10.1.0.0/16 from Jan 1 00:00 to Jan 1 01:00, 2027 and check if their origin AS differs from that of the parent prefix.": 0.29629629629629634,
            "Identify any newly appearing prefixes in the local BGP updates data from Sept 5 12:00 to Sept 5 13:00, 2025 by comparing against a known set of historical prefixes. Summarize the newly introduced prefixes, their origin AS, and first-seen timestamps.": 0.2696629213483146,
            "Analyze the range of MED values and the most common community tags associated with BGP update messages for ASN 4766 from Oct 28 13:00 to Oct 28 14:00, 2024. Provide a summary of average MED values and frequently observed community tags.": 0.2696629213483146,
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.2619047619047619,
            "Examine the presence and coverage of IPv6 prefixes in the local BGP updates from Sept 1 00:00 to Sept 1 02:00, 2026. Compare the number of unique IPv6 routes and origin ASNs to a reference list of expected IPv6 routes. Summarize missing or newly present routes.": 0.2553191489361702,
            "Detect unusual AS path changes for prefixes associated with ASN 4766 from Oct 28 13:00 to Oct 28 13:15, 2024. Summarize the prefixes, number of path changes, and frequency of these changes.": 0.25,
            "Analyze changes in the LOCAL_PREF (Local Preference) attribute for routes advertised by AS65501 from Jan 2 08:00 to Jan 2 09:00, 2026. Track distinct LOCAL_PREF values and how often they change for each prefix.": 0.23809523809523808
        },
        "avg_similarity_score": 0.19919387891330873
    },
    {
        "instruction": "Analyze MOAS (Multiple Origin AS) prefixes in BGP updates from Jan 1 10:00 to Jan 1 11:00, 2026, and determine which prefixes are associated with more than one origin AS during this period.",
        "input": "Time window: Jan 1, 2026, 10:00:00 to Jan 1, 2026, 11:00:00\nRecord Type: updates (Announcements)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_prefixes():\n    from_time_str = \"2026-01-01 10:00:00\"\n    until_time_str = \"2026-01-01 11:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    # Dictionary: prefix -> set of origin ASNs\n    moas_data = defaultdict(set)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        ts = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if ts < from_time or ts > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            fields = elem.fields\n                            as_path = fields.get('as-path', '').split()\n                            if as_path:\n                                origin_asn = as_path[-1]\n                                prefix = fields.get('prefix')\n                                if prefix:\n                                    moas_data[prefix].add(origin_asn)\n\n    moas_results = {pfx: asns for pfx, asns in moas_data.items() if len(asns) > 1}\n\n    if moas_results:\n        print(\"MOAS Prefixes Detected:\")\n        for prefix, asns in moas_results.items():\n            print(f\"Prefix: {prefix}, Origin ASNs: {list(asns)}\")\n    else:\n        print(\"No MOAS prefixes found in the specified time window.\")\n\nif __name__ == \"__main__\":\n    analyze_moas_prefixes()\n```",
        "most_similar_instructions": {
            "Analyze MOAS (Multiple Origin AS) prefixes from a local BGP update file and identify prefixes announced by more than one ASN. Focus on updates from Jan 15 00:00 to Jan 15 01:00, 2029 and provide a summary of these prefixes with their respective ASNs.": 0.4197530864197531,
            "Analyze deaggregation for any subprefixes of 10.1.0.0/16 in the local BGP updates from May 1 10:00 to May 1 11:00, 2026. Identify newly announced longer subprefixes and compare their origin AS to the origin of the parent prefix.": 0.4050632911392405,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.36111111111111116,
            "Analyze the occurrence of MOAS (Multiple Origin AS) prefixes in a specific time window from locally stored BGP update files. Identify and list all MOAS prefixes along with the ASNs that originated them.": 0.3235294117647059,
            "Analyze the next-hop address variations in BGP updates for prefix 1.1.1.0/24 from Oct 1 00:00 to Oct 1 01:00, 2026. Summarize each distinct next-hop IP and how frequently it appeared in announcements.": 0.32,
            "Identify any newly announced subprefixes of 10.1.0.0/16 from Jan 1 00:00 to Jan 1 01:00, 2027 and check if their origin AS differs from that of the parent prefix.": 0.3142857142857143,
            "Examine the presence and coverage of IPv6 prefixes in the local BGP updates from Sept 1 00:00 to Sept 1 02:00, 2026. Compare the number of unique IPv6 routes and origin ASNs to a reference list of expected IPv6 routes. Summarize missing or newly present routes.": 0.31325301204819284,
            "Calculate the top 10 ASNs by the number of unique prefixes they originate in the local BGP updates from March 5 00:00 to March 5 01:00, 2026. Summarize each ASN and the count of unique prefixes.": 0.3013698630136986,
            "Identify potential update storms for prefix 203.0.113.0/24 from July 1 10:00 to July 1 10:15, 2027 by counting consecutive announcements and withdrawals. Mark intervals with more than 50 updates as an update storm.": 0.29729729729729726,
            "Identify any newly appearing prefixes in the local BGP updates data from Sept 5 12:00 to Sept 5 13:00, 2025 by comparing against a known set of historical prefixes. Summarize the newly introduced prefixes, their origin AS, and first-seen timestamps.": 0.28205128205128205
        },
        "avg_similarity_score": 0.22568661587935993
    },
    {
        "instruction": "Check for MOAS (Multiple Origin AS) conflicts in BGP updates for the prefix '192.0.2.0/24' between September 1st 00:00 and September 1st 01:00, 2027. Identify each conflicting AS and the time of conflict.",
        "input": "Time window: Sep 1, 2027, 00:00:00 to Sep 1, 2027, 01:00:00\nTarget Prefix: 192.0.2.0/24\nRecord Type: updates (Announcements)",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef detect_moas_conflicts():\n    target_prefix = \"192.0.2.0/24\"\n    from_time_str = \"2027-09-01 00:00:00\"\n    until_time_str = \"2027-09-01 01:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    moas_conflicts = defaultdict(list)\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            fields = elem.fields\n                            prefix = fields.get('prefix')\n                            as_path = fields.get('as-path', '').split()\n\n                            if prefix == target_prefix and as_path:\n                                origin_as = as_path[-1]\n                                moas_conflicts[origin_as].append(elem_dt)\n\n    if moas_conflicts:\n        print(f\"MOAS conflicts detected for prefix {target_prefix}\")\n        for origin_as, times in moas_conflicts.items():\n            print(f\"Origin AS: {origin_as}, Times: {times}\")\n    else:\n        print(f\"No MOAS conflicts detected for prefix {target_prefix} in the given time window.\")\n\nif __name__ == \"__main__\":\n    detect_moas_conflicts()\n```",
        "most_similar_instructions": {
            "Detect instances of AS path prepending in announcements for prefix 192.0.2.0/24 from Dec 20 00:00 to Dec 20 02:00, 2025. Summarize the number of times an AS repeats consecutively and how frequently it occurs in the observed data.": 0.36585365853658536,
            "Detect and summarize usage of the ATOMIC_AGGREGATE path attribute in announcements for prefix 192.168.1.0/24 from Dec 10 00:00 to Dec 10 01:00, 2027. List each occurrence, the origin AS, and the as-path when ATOMIC_AGGREGATE is set.": 0.36144578313253006,
            "Check for potential RPKI-invalid announcements originating from AS64496 between Aug 10 00:00 and Aug 10 01:00, 2027. Summarize each prefix flagged as invalid, its origin AS, and the reason for invalidity (e.g., max length exceeded).": 0.33766233766233766,
            "Analyze the next-hop address variations in BGP updates for prefix 1.1.1.0/24 from Oct 1 00:00 to Oct 1 01:00, 2026. Summarize each distinct next-hop IP and how frequently it appeared in announcements.": 0.33333333333333337,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.32,
            "Analyze AS path diversity for prefix 8.8.4.0/24 from Jan 10 00:00 to Jan 10 01:00, 2028. Collect all unique AS paths, count their occurrences, and identify the top 5 most common paths.": 0.3157894736842105,
            "Identify and log BGP peer session up/down events for any monitored peers within the time window Mar 2 00:00 to Mar 2 02:00, 2027. Summarize each session's state changes and the timestamps of these events.": 0.3116883116883117,
            "Detect any MOAS (Multiple Origin AS) events for prefix 203.1.2.0/24 from Nov 1 12:00 to Nov 1 13:00, 2025, and cross-check if any of these additional origins might indicate a hijack (e.g., unknown or suspicious AS not typically announcing the prefix). Summarize potential hijack incidents.": 0.3076923076923077,
            "Find any AS path loops for prefix 192.168.10.0/24 from Oct 20 00:00 to Oct 20 01:00, 2028. An AS loop occurs if an ASN reappears non-consecutively within the path. Summarize looped paths and timestamps.": 0.3037974683544304,
            "Analyze MOAS (Multiple Origin AS) prefixes in BGP updates from Jan 1 10:00 to Jan 1 11:00, 2026, and determine which prefixes are associated with more than one origin AS during this period.": 0.3013698630136986
        },
        "avg_similarity_score": 0.22905387518495604
    },
    {
        "instruction": "Analyze MOAS (Multiple Origin AS) prefixes for a specific time window and list the prefixes with more than one origin ASN, along with their respective ASNs and occurrence counts.",
        "input": "Time window: March 15, 2025, 08:00:00 to March 15, 2025, 09:00:00\nRecord Type: updates",
        "output": "```python\nimport os\nimport re\nimport pybgpstream\nfrom datetime import datetime, timezone\nfrom collections import defaultdict\n\ndef analyze_moas_prefixes():\n    from_time_str = \"2025-03-15 08:00:00\"\n    until_time_str = \"2025-03-15 09:00:00\"\n\n    from_time = datetime.strptime(from_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n    until_time = datetime.strptime(until_time_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=timezone.utc)\n\n    directory = \"/path/to/local/bgp/updates\"\n    pattern = r'^updates\\.(\\d{8})\\.(\\d{4})\\.(bz2|gz)$'\n\n    moas_prefixes = defaultdict(lambda: defaultdict(int))\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            match = re.match(pattern, file)\n            if match:\n                date_str = match.group(1)\n                time_str = match.group(2)\n                file_ts_str = date_str + time_str\n                file_dt = datetime.strptime(file_ts_str, \"%Y%m%d%H%M\").replace(tzinfo=timezone.utc)\n\n                if file_dt < from_time or file_dt > until_time:\n                    continue\n\n                file_path = os.path.join(root, file)\n                stream = pybgpstream.BGPStream(data_interface=\"singlefile\")\n                stream.set_data_interface_option(\"singlefile\", \"upd-file\", file_path)\n\n                for rec in stream.records():\n                    for elem in rec:\n                        elem_dt = datetime.utcfromtimestamp(elem.time).replace(tzinfo=timezone.utc)\n\n                        if elem_dt < from_time or elem_dt > until_time:\n                            continue\n\n                        if elem.type == 'A':\n                            prefix = elem.fields.get('prefix', '')\n                            as_path_str = elem.fields.get('as-path', '')\n                            as_path_list = as_path_str.split()\n                            if as_path_list:\n                                origin_as = as_path_list[-1]\n                                moas_prefixes[prefix][origin_as] += 1\n\n    moas_result = {\n        prefix: origins for prefix, origins in moas_prefixes.items() if len(origins) > 1\n    }\n\n    if moas_result:\n        print(\"MOAS Prefixes and their Origin ASNs:\")\n        for prefix, origins in moas_result.items():\n            print(f\"Prefix: {prefix}\")\n            for origin_asn, count in origins.items():\n                print(f\"  ASN: {origin_asn}, Count: {count}\")\n    else:\n        print(\"No MOAS prefixes found for the specified time window.\")\n\nif __name__ == \"__main__\":\n    analyze_moas_prefixes()\n```",
        "most_similar_instructions": {
            "Analyze the occurrence of MOAS (Multiple Origin AS) prefixes in a specific time window from locally stored BGP update files. Identify and list all MOAS prefixes along with the ASNs that originated them.": 0.5161290322580646,
            "Analyze MOAS (Multiple Origin AS) prefixes from a local BGP update file and identify prefixes announced by more than one ASN. Focus on updates from Jan 15 00:00 to Jan 15 01:00, 2029 and provide a summary of these prefixes with their respective ASNs.": 0.4533333333333333,
            "Analyze MOAS (Multiple Origin AS) prefixes in BGP updates from Jan 1 10:00 to Jan 1 11:00, 2026, and determine which prefixes are associated with more than one origin AS during this period.": 0.40625,
            "Detect multiple origin AS (MOAS) occurrences for a set of example prefix ranges from Jan 1 00:00 to Jan 1 01:00, 2025. Summarize the MOAS prefixes, the distinct origin ASes, and the number of occurrences.": 0.27272727272727276,
            "Examine the aggregator attribute for any prefixes originated by AS12345 between Feb 10 10:00 and Feb 10 11:00, 2025. Summarize the distinct aggregator ASNs and IPs along with occurrence counts.": 0.22950819672131145,
            "Check for MOAS (Multiple Origin AS) conflicts in BGP updates for the prefix '192.0.2.0/24' between September 1st 00:00 and September 1st 01:00, 2027. Identify each conflicting AS and the time of conflict.": 0.208955223880597,
            "Analyze usage of the Graceful Shutdown community (commonly 65535:0 or similar) for routes originated by AS65500 from June 1 00:00 to June 1 01:00, 2027. Summarize each prefix announcing this community, the origin AS, and occurrence counts.": 0.2028985507246377,
            "Compare the average AS path length for IPv6 routes vs. IPv4 routes announced between May 10 00:00 and May 10 01:00, 2028. Summarize the count of unique IPv4 prefixes, unique IPv6 prefixes, and their respective mean AS path lengths.": 0.20000000000000004,
            "Detect unusual AS path changes for prefixes associated with ASN 4766 from Oct 28 13:00 to Oct 28 13:15, 2024. Summarize the prefixes, number of path changes, and frequency of these changes.": 0.19047619047619047,
            "Detect any MOAS (Multiple Origin AS) events for prefix 203.1.2.0/24 from Nov 1 12:00 to Nov 1 13:00, 2025, and cross-check if any of these additional origins might indicate a hijack (e.g., unknown or suspicious AS not typically announcing the prefix). Summarize potential hijack incidents.": 0.17073170731707316
        },
        "avg_similarity_score": 0.14885331119338546
    }
]